---
openapi: 3.0.0
info:
  title: Simple Inventory API
  description: This is a simple API
  contact:
    email: rael.calitro@ynov.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
servers:
  - url: https://virtserver.swaggerhub.com/rael06/ylunch-api/1.0.0
    description: SwaggerHub API Auto Mocking
  - url: https://ylunch-api.rael-calitro.ovh
    description: Online server
  - url: http://localhost:5254
    description: Local server
security:
  - Bearer: [ ]
tags:
  - name: trials
    description: Operations available to try the api
  - name: authentication
    description: authentication endpoints
  - name: users
    description: users endpoints
paths:
  /trials/anonymous:
    get:
      tags:
        - trials
      summary: Tries the api as anonymous
      operationId: getAnonymousTry
      responses:
        "200":
          description: |
            Success:
            - The anonymous trial Json object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnonymousTrialDto'
        "400":
          description: |
            Bad request:
            - Something went wrong, please try again later
  /authentication/login:
    post:
      tags:
        - authentication
      summary: Login a user and returns access and refresh tokens as Json Web Token
      operationId: login
      requestBody:
        required: true
        description: A JSON object that contains the user name and password
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequestDto'
      responses:
        '200':
          description: |
            Success:
            - The access and refresh tokens
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenReadDto'
        '400':
          description: |
            Bad request:
            - Something went wrong, please try again later
        '401':
          description: |
            Unauthorized:
            - Please login and use provided tokens
  /restaurant-admins:
    post:
      tags:
        - users
      summary: Restaurant admin registration
      operationId: addRestaurantAdmin
      requestBody:
        description: User to register
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreateDto'
      responses:
        "201":
          description: user created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserReadDto'
        "400":
          description: invalid input, object invalid
        "409":
          description: User already exists
  /customers:
    post:
      tags:
        - users
      summary: Customer registration
      operationId: addCustomer
      requestBody:
        description: User to register
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreateDto'
      responses:
        "201":
          description: user created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserReadDto'
        "400":
          description: invalid input, object invalid
        "409":
          description: User already exists
components:
  schemas:
    AnonymousTrialDto:
      properties:
        message:
          type: string
          description: DiscordApi is running, you are anonymous
    LoginRequestDto:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          description: cannot be empty
          example: my-pseudo
        password:
          type: string
          description: cannot be empty
          example: Password1234.
    TokenReadDto:
      type: object
      properties:
        accessToken:
          type: string
          example: |
            eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJJZCI6ImFlNTcxOGJkLWY5NzktNDQ1Ni04MmRlLTBjNzgzMzk4NzYzNCIsImp0aSI6IjBjZjc3NGYwLTUxYWQtNDM4Yi1hNTZlLTI1N2VlZGRhMjQ0MCIsIm5iZiI6MTY0MTEzNzMxMCwiZXhwIjoxNjQxMTU4OTEwLCJpYXQiOjE2NDExMzczMTB9.q1VaAodjovu79AyBNbrSxu4yZ4vOlDZQF2IyDvcsbJM
        refreshToken:
          type: string
          example: abcdefghij-a00000e0-aaa0-000a-0000-00e00aa00e00
    UserCreateDto:
      required:
        - email
        - firstname
        - lastname
        - password
        - phoneNumber
      type: object
      properties:
        email:
          type: string
          format: email
          example: owner@restaurant.com
        firstname:
          type: string
          example: Jean
        lastname:
          type: string
          example: Dupont
        phoneNumber:
          type: string
          format: phone
          example: "0612345678"
        password:
          type: string
          format: password
          example: Password1234.
    UserReadDto:
      type: object
      properties:
        id:
          type: string
          example: a00000e0-aaa0-000a-0000-00e00aa00e00
        email:
          type: string
          format: email
          example: user@domain.com
        firstname:
          type: string
          example: Jean
        lastname:
          type: string
          example: Dupont
        phoneNumber:
          type: string
          format: phone
          example: "0612345678"
        roles:
          type: array
          example:
            - RestaurantAdmin
          items:
            type: string
  securitySchemes:
    Bearer:
      type: http
      description: |
        JWT Authorization header using the Bearer scheme. Example: \"Authorization: Bearer {token}\"",
      scheme: bearer
